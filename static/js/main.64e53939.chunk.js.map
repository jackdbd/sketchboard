{"version":3,"sources":["components/EventsList/styles.module.css","components/Main/styles.module.css","components/App/styles.module.css","hooks/index.ts","components/Board/utils.ts","components/Sidebar/observables.ts","components/Board/observables.ts","components/Board/Board.tsx","components/EventsList/EventsList.tsx","components/Main/Main.tsx","components/Sidebar/Sidebar.tsx","index.tsx","components/App/index.tsx","components/Board/styles.module.css","components/Sidebar/styles.module.css"],"names":["module","exports","useSharedState","subject","useState","getValue","value","setState","useEffect","subscription","pipe","skip","subscribe","s","unsubscribe","state","next","makeCircleFromPairClicks","pair","ev0","ev1","cx","clientX","cy","clientY","x","y","r","Math","sqrt","pow","abs","makeTriangleFromTriplet","triplet","ev2","a","b","c","coordinatesFromEvent","event","domRect","target","getBoundingClientRect","left","top","Option","makeTripletOfClicks","events","makeObservableOfClickEventsOnDiv","div","eventTarget","fromEvent","BoardSubject","BehaviorSubject","clickCount","coordinates","lastClick","Board","setSharedState","refDiv","useRef","refSvg","current","Error","subscriptionOnCircles","pairwise","map","svg","svgNS","namespaceURI","circle","document","createElementNS","setAttribute","appendChild","addCircleToBoard","subscriptionOnTriangles","tap","className","styles","board","data-testid","onClick","onMouseMove","lc","length","ref","inner","height","width","stroke","strokeWidth","fill","EventsList","props","i","key","Main","main","initialState","dropdownChangesCount","shape","Circle","ShapePickerSubject","Sidebar","label","clsx","sidebar","htmlFor","select","id","name","onChange","Triangle","BezierCurve","style","outline","type","defaultValue","disabled","range","size","checked","icon","ReactDOM","render","app","getElementById"],"mappings":"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","file":"static/js/main.64e53939.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"event-list\":\"styles-module__event-list--lfxdY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles-module__main--2BLax\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles-module__app--UQBRD\"};","import { useEffect, useState } from 'react';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\n/**\n * Reactive Hook that returns a tuple of resolved value and error.\n * @param { Observable<T> } observable$\n * @param { T } defaultValue\n */\nexport function useObservable<T>(observable$: Observable<T>, initialValue?: T) {\n  const [value, setValue] = useState(initialValue);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    const observer = {\n      complete: () => {\n        console.warn('COMPLETE');\n      },\n      error: (err: any) => {\n        setError(err);\n      },\n      next: (val: T) => setValue(val),\n    };\n    const subscription = observable$.subscribe(observer);\n    return () => subscription.unsubscribe();\n  }, [observable$]);\n\n  return [value, error];\n}\n\nexport const useSharedState = <T>(\n  subject: BehaviorSubject<T>\n): [T, typeof useState] => {\n  const [value, setState] = useState(subject.getValue());\n  useEffect(() => {\n    const observer = (s: T) => setState(s);\n    const subscription = subject.pipe(skip(1)).subscribe(observer);\n    return () => subscription.unsubscribe();\n  });\n  const newSetState = (state: T) => subject.next(state);\n  // @ts-ignore\n  return [value, newSetState];\n};\n","import { Coords, PairClicks, TripletClicks } from './types';\n\nexport interface ICircle {\n  cx: number;\n  cy: number;\n  r: number;\n}\n\nexport const makeCircleFromPairClicks = (pair: PairClicks): ICircle => {\n  const [ev0, ev1] = pair;\n  const cx = ev0.clientX;\n  const cy = ev0.clientY;\n  const x = ev1.clientX;\n  const y = ev1.clientY;\n  const r = Math.sqrt(\n    Math.pow(Math.abs(x - cx), 2) + Math.pow(Math.abs(y - cy), 2)\n  );\n  return { cx, cy, r };\n};\n\nexport const makeTriangleFromTriplet = (triplet: TripletClicks) => {\n  const [ev0, ev1, ev2] = triplet;\n  const a = { x: ev0.clientX, y: ev0.clientY };\n  const b = { x: ev1.clientX, y: ev1.clientY };\n  const c = { x: ev2.clientX, y: ev2.clientY };\n  return { a, b, c };\n};\n\n// TODO: use d3?\nexport const addCircleToBoard = (svg: SVGSVGElement, c: ICircle) => {\n  const svgNS = svg.namespaceURI;\n  const circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', `${c.cx}`);\n  circle.setAttribute('cy', `${c.cy}`);\n  circle.setAttribute('r', `${c.r}`);\n  circle.setAttribute('fill', 'red');\n  circle.setAttribute('stroke', 'black');\n  circle.setAttribute('stroke-width', '20px');\n  circle.setAttribute('stroke-opacity', '0.5');\n  svg.appendChild(circle);\n};\n\nexport function coordinatesFromEvent(\n  event: React.MouseEvent<HTMLElement, MouseEvent> | MouseEvent\n): Coords {\n  const domRect = (event.target as HTMLDivElement).getBoundingClientRect();\n  const { clientX, clientY } = event;\n  const x = clientX - domRect.left;\n  const y = clientY - domRect.top;\n  return [x, y];\n}\n\nexport const makeTripletOfClicks = (events: [PairClicks, PairClicks]) => {\n  const ev0 = events[0][0];\n  const ev1 = events[0][1];\n  const ev2 = events[1][1];\n  const triplet = [ev0, ev1, ev2] as TripletClicks;\n  return triplet;\n};\n","import { BehaviorSubject } from 'rxjs';\n\n// Available options for the shape picker.\nexport enum Option {\n  BezierCurve = 'Bezier Curve',\n  Circle = 'Circle',\n  Triangle = 'Triangle',\n}\n\n// Initial state of the Sidebar component.\nconst initialState = {\n  dropdownChangesCount: 0,\n  shape: Option.Circle,\n};\n\n/**\n * Observable that emits new values to all of its subscribers every time the\n * state of the Sidebar changes. It starts with an initial state.\n */\nexport const ShapePickerSubject = new BehaviorSubject(initialState);\n","import { BehaviorSubject, fromEvent } from 'rxjs';\nimport { map, pairwise } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport { Coords } from './types';\nimport { makeCircleFromPairClicks } from './utils';\n\nconst makeObservableOfClickEventsOnTarget = (\n  eventTarget: FromEventTarget<MouseEvent>\n) => {\n  return fromEvent(eventTarget, 'click');\n};\n\nexport const makeObservableOfClickEventsOnDiv = (div: HTMLDivElement) =>\n  makeObservableOfClickEventsOnTarget(div);\n\nexport const makeObservableOfCircles = (div: HTMLDivElement) => {\n  return makeObservableOfClickEventsOnDiv(div).pipe(\n    pairwise(),\n    map(makeCircleFromPairClicks)\n  );\n};\n\n// Initial state of the Board component.\nconst initialState = {\n  clickCount: 0,\n  coordinates: [] as Coords[],\n  lastClick: [0, 0] as Coords,\n};\n\n/**\n * Observable that emits new values to all of its subscribers every time the\n * state of the Board changes. It starts with an initial state.\n */\nexport const BoardSubject = new BehaviorSubject(initialState);\n","import React, { useEffect, useRef } from 'react';\nimport { map, pairwise, tap } from 'rxjs/operators';\n\nimport { useSharedState } from '../../hooks';\nimport {\n  BoardSubject,\n  makeObservableOfCircles,\n  makeObservableOfClickEventsOnDiv,\n} from './observables';\nimport {\n  addCircleToBoard,\n  coordinatesFromEvent,\n  ICircle,\n  makeTriangleFromTriplet,\n  makeTripletOfClicks,\n} from './utils';\n\nimport styles from './styles.module.css';\nimport { Coords, TripletClicks } from './types';\n\nexport const TEST_ID_CONTAINER = 'board-container-test-id';\nexport const TEST_ID_SVG = 'board-svg-test-id';\n\nconst REF_NOT_READY = 'ASSERT: ref NOT ready!';\n\nexport const Board: React.FC = () => {\n  const [\n    { clickCount, coordinates, lastClick },\n    setSharedState,\n  ] = useSharedState(BoardSubject);\n\n  const refDiv = useRef<HTMLDivElement>(null);\n  const refSvg = useRef<SVGSVGElement>(null);\n\n  useEffect(() => {\n    if (!refDiv.current) {\n      throw new Error(REF_NOT_READY);\n    }\n\n    // TODO: make another useEffect?\n    if (!refSvg.current) {\n      throw new Error(REF_NOT_READY);\n    }\n\n    const observableOfCircles = makeObservableOfCircles(refDiv.current);\n\n    const observerOfCircles = (c: ICircle) => {\n      if (!refSvg.current) {\n        throw new Error(REF_NOT_READY);\n      }\n      const svg = refSvg.current;\n      addCircleToBoard(svg, c);\n      setSharedState({\n        clickCount: clickCount + 1,\n        coordinates,\n        lastClick: [c.cx, c.cy] as Coords,\n      });\n    };\n\n    const subscriptionOnCircles = observableOfCircles.subscribe(\n      observerOfCircles\n    );\n\n    const observableOfClicks = makeObservableOfClickEventsOnDiv(refDiv.current);\n\n    // TODO: make this observable side-effects free and perform side effects in the observer?\n    const observableOfTripletClicks = observableOfClicks.pipe(\n      pairwise(),\n      pairwise(),\n      map(makeTripletOfClicks),\n      tap((triplet: TripletClicks) => {\n        setSharedState({\n          clickCount,\n          coordinates,\n          lastClick: [...coordinatesFromEvent(triplet[0])],\n        });\n      })\n    );\n    const subscriptionOnTriangles = observableOfTripletClicks.subscribe(\n      makeTriangleFromTriplet\n    );\n\n    return () => {\n      subscriptionOnCircles.unsubscribe();\n      subscriptionOnTriangles.unsubscribe();\n    };\n  }, [refDiv, refSvg]);\n\n  const onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const [x, y] = coordinatesFromEvent(event);\n    setSharedState({\n      clickCount: clickCount + 1,\n      coordinates: [...coordinates, [x, y]] as Coords[],\n      lastClick: [x, y] as Coords,\n    });\n  };\n\n  const onMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const [x, y] = coordinatesFromEvent(event);\n    const lc: Coords = coordinates.length\n      ? coordinates[coordinates.length - 1]\n      : [0, 0];\n    setSharedState({\n      clickCount,\n      coordinates: [...coordinates, [x, y]] as Coords[],\n      lastClick: lc,\n    });\n  };\n\n  return (\n    <div\n      className={styles.board}\n      data-testid={TEST_ID_CONTAINER}\n      onClick={onClick}\n      onMouseMove={onMouseMove}\n      ref={refDiv}\n    >\n      <div className={styles.inner}>\n        <svg\n          className={styles['svg-board']}\n          data-testid={TEST_ID_SVG}\n          height=\"100%\"\n          ref={refSvg}\n          width=\"100%\"\n        >\n          <circle\n            cx={lastClick[0]}\n            cy={lastClick[1]}\n            r=\"40\"\n            stroke=\"black\"\n            strokeWidth=\"3\"\n            fill={'steelblue'}\n          />\n          <text\n            className={styles['circle-center']}\n            x={lastClick[0]}\n            y={lastClick[1]}\n          >\n            {`x: ${lastClick[0]}; y: ${lastClick[1]}`}\n          </text>\n        </svg>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Coords } from '../Board/types';\n\nimport styles from './styles.module.css';\n\ninterface IProps {\n  coordinates: Coords[];\n}\n\nexport const EventsList: React.FC<IProps> = props => {\n  const { coordinates } = props;\n  return (\n    <div className={styles['event-list']}>\n      <p>{`Got ${coordinates.length} coordinates`}</p>\n      <ol>\n        {coordinates.map((c, i) => (\n          <li key={`${c[0]}-${c[1]}-${i}`}>{`x: ${c[0]}; y: ${c[1]}`}</li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { Board, BoardSubject } from '../Board';\nimport { EventsList } from '../EventsList';\n\nimport styles from './styles.module.css';\n\n// type PairClicks = [MouseEvent, MouseEvent];\n// type TripletClicks = [MouseEvent, MouseEvent, MouseEvent];\n\n// const makeTripletOfClicks = (events: [PairClicks, PairClicks]) => {\n//   const ev0 = events[0][0];\n//   const ev1 = events[0][1];\n//   const ev2 = events[1][1];\n//   const triplet = [ev0, ev1, ev2] as TripletClicks;\n//   return triplet;\n// };\n\n// const observableOfTripletClicks = observableOfClicks.pipe(\n//   pairwise(),\n//   pairwise(),\n//   map(makeTripletOfClicks)\n// );\n\nexport const Main: React.FC = () => {\n  const [{ coordinates }] = useSharedState(BoardSubject);\n  return (\n    <div className={styles.main}>\n      <Board />\n      <EventsList coordinates={coordinates} />\n    </div>\n  );\n};\n","import { Button, Icon, Slider, Switch } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { Option, ShapePickerSubject } from './observables';\nimport styles from './styles.module.css';\n\ninterface IProps {\n  label: string;\n}\n\nexport const TEST_ID_CONTAINER = 'sidebar-container-test-id';\nexport const TEST_ID_SELECT = 'sidebar-select-test-id';\n\nexport const Sidebar: React.FC<IProps> = props => {\n  const { label } = props;\n\n  const [state, setState] = useSharedState(ShapePickerSubject);\n  const { dropdownChangesCount, shape } = state;\n\n  const onChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setState({\n      dropdownChangesCount: state.dropdownChangesCount + 1,\n      shape: event.target.value as Option,\n    });\n  };\n\n  const className = clsx(styles.sidebar, 'stack');\n\n  return (\n    <div className={className} data-testid={TEST_ID_CONTAINER}>\n      <div className=\"stack-small\">\n        <label htmlFor=\"shape-select\">{label}</label>\n        <select\n          className={styles.select}\n          id=\"shape-select\"\n          data-testid={TEST_ID_SELECT}\n          name=\"shape-selector\"\n          onChange={onChange}\n        >\n          <option value={Option.Circle}>Circle</option>\n          <option value={Option.Triangle}>Triangle</option>\n          <option value={Option.BezierCurve}>Bezier Curve</option>\n        </select>\n      </div>\n\n      <div className=\"stack-large\">\n        <p>{`You selected ${shape}`}</p>\n        <p>{`You changed shape ${dropdownChangesCount} times`}</p>\n      </div>\n      <div className=\"stack-small\">\n        {'Some icons'}\n        <div style={{ outline: '0.2rem solid orange' }}>\n          <Icon type=\"caret-up\" />\n          <Icon type=\"play-circle\" />\n          <Icon type=\"radar-chart\" />\n          <Icon type=\"heat-map\" />\n        </div>\n        {'Some sliders and switches'}\n        <div style={{ outline: '0.2rem solid orange' }}>\n          <Slider defaultValue={30} disabled={true} />\n          <Slider range defaultValue={[20, 50]} disabled={false} />\n          {'Disabled:'}\n          <Switch size=\"small\" checked={false} style={{ width: '33%' }} />\n          {'Enabled:'}\n          <Switch size=\"small\" checked={true} style={{ width: '50%' }} />\n        </div>\n        <Button type=\"primary\" shape=\"circle\" icon=\"search\" />\n        <Button type=\"primary\">\n          <span>Button with icon</span>\n          <Icon type=\"taobao\" />\n        </Button>\n        <Button type=\"dashed\" icon=\"search\">\n          Search\n        </Button>\n      </div>\n      <Button type=\"primary\">\n        <span>Button with icon</span>\n        <Icon type=\"taobao\" />\n      </Button>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './css/index.css';\n\nimport { App } from './components/App';\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { Main } from '../Main';\nimport { BoardSubject } from '../Board';\nimport { ShapePickerSubject, Sidebar } from '../Sidebar';\n\nimport styles from './styles.module.css';\n\nexport const App = () => {\n  const [{ dropdownChangesCount }] = useSharedState(ShapePickerSubject);\n  const [{ clickCount, lastClick }] = useSharedState(BoardSubject);\n\n  return (\n    <div className={styles.app}>\n      <Main />\n      <Sidebar label={'Choose a shape to draw:'} />\n      <div style={{ outline: '0.2rem solid orange' }}>\n        <p>{`Dropdown changed ${dropdownChangesCount} times`}</p>\n        <p>{`Last click coordinates ${lastClick}`}</p>\n        <p>{`Click count ${clickCount}`}</p>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"styles-module__board--1-URo\",\"circle-center\":\"styles-module__circle-center--2hzvi\",\"inner\":\"styles-module__inner--2bN0y\",\"svg-board\":\"styles-module__svg-board--qNj_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"styles-module__sidebar--179zX\",\"select\":\"styles-module__select--34NKF\"};"],"sourceRoot":""}