{"version":3,"sources":["components/App/styles.module.css","hooks/index.ts","components/Sidebar/observables.ts","components/Sidebar/Sidebar.tsx","components/Board/observables.ts","components/EventsList/EventsList.tsx","components/Board/Board.tsx","components/Board/observers.ts","index.tsx","components/App/index.tsx","components/Sidebar/styles.module.css","components/Board/styles.module.css"],"names":["module","exports","Option","useSharedState","subject","useState","getValue","value","setState","useEffect","subscription","pipe","skip","subscribe","s","unsubscribe","state","next","initialState","dropdownChangesCount","shape","Circle","ShapePickerSubject","BehaviorSubject","Sidebar","props","label","className","clsx","styles","sidebar","data-testid","htmlFor","select","id","name","onChange","event","target","Triangle","BezierCurve","style","outline","type","defaultValue","disabled","range","size","checked","width","icon","BoardSubject","clickCount","EventsList","events","length","map","ev","key","timestamp","x","y","clientX","clientY","observable","Observable","create","ob","obsModified","take","pairwise","tap","console","warn","filter","observer","complete","log","error","subscriber","observableOfClicks","fromEvent","document","observableOfPairClicks","observableOfTripletClicks","pair","ev0","ev1","cx","cy","circle","r","Math","sqrt","pow","abs","triplet","ev2","triangle","a","b","c","Board","text","accumulator","acc","timeStamp","screenX","screenY","useEventCallback","event$","scan","clickCallback","board","onClick","height","viewBox","stroke","strokeWidth","fill","ReactDOM","render","app","getElementById"],"mappings":"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","file":"static/js/main.70f9699e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles-module__app--UQBRD\"};","import { useEffect, useState } from 'react';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\n/**\n * Reactive Hook that returns a tuple of resolved value and error.\n * @param { Observable<T> } observable$\n * @param { T } defaultValue\n */\nexport function useObservable<T>(observable$: Observable<T>, initialValue?: T) {\n  const [value, setValue] = useState(initialValue);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    const observer = {\n      complete: () => {\n        console.warn('COMPLETE');\n      },\n      error: (err: any) => {\n        setError(err);\n      },\n      next: (val: T) => setValue(val),\n    };\n    const subscription = observable$.subscribe(observer);\n    return () => subscription.unsubscribe();\n  }, [observable$]);\n\n  return [value, error];\n}\n\nexport const useSharedState = <T>(\n  subject: BehaviorSubject<T>\n): [T, typeof useState] => {\n  const [value, setState] = useState(subject.getValue());\n  useEffect(() => {\n    const observer = (s: T) => setState(s);\n    const subscription = subject.pipe(skip(1)).subscribe(observer);\n    return () => subscription.unsubscribe();\n  });\n  const newSetState = (state: T) => subject.next(state);\n  // @ts-ignore\n  return [value, newSetState];\n};\n","import { BehaviorSubject } from 'rxjs';\n\n// Available options for the shape picker.\nexport enum Option {\n  BezierCurve = 'Bezier Curve',\n  Circle = 'Circle',\n  Triangle = 'Triangle',\n}\n\n// Initial state of the Sidebar component.\nconst initialState = {\n  dropdownChangesCount: 0,\n  shape: Option.Circle,\n};\n\n/**\n * Observable that emits new values to all of its subscribers every time the\n * state of the Sidebar changes. It starts with an initial state.\n */\nexport const ShapePickerSubject = new BehaviorSubject(initialState);\n","import { Button, Icon, Slider, Switch } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { Option, ShapePickerSubject } from './observables';\nimport styles from './styles.module.css';\n\ninterface IProps {\n  label: string;\n}\n\nexport const TEST_ID_CONTAINER = 'sidebar-container-test-id';\nexport const TEST_ID_SELECT = 'sidebar-select-test-id';\n\nexport const Sidebar: React.FC<IProps> = props => {\n  const { label } = props;\n\n  const [state, setState] = useSharedState(ShapePickerSubject);\n  const { dropdownChangesCount, shape } = state;\n\n  const onChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setState({\n      dropdownChangesCount: state.dropdownChangesCount + 1,\n      shape: event.target.value as Option,\n    });\n  };\n\n  const className = clsx(styles.sidebar, 'stack');\n\n  return (\n    <div className={className} data-testid={TEST_ID_CONTAINER}>\n      <div className=\"stack-small\">\n        <label htmlFor=\"shape-select\">{label}</label>\n        <select\n          className={styles.select}\n          id=\"shape-select\"\n          data-testid={TEST_ID_SELECT}\n          name=\"shape-selector\"\n          onChange={onChange}\n        >\n          <option value={Option.Circle}>Circle</option>\n          <option value={Option.Triangle}>Triangle</option>\n          <option value={Option.BezierCurve}>Bezier Curve</option>\n        </select>\n      </div>\n\n      <div className=\"stack-large\">\n        <p>{`You selected ${shape}`}</p>\n        <p>{`You changed shape ${dropdownChangesCount} times`}</p>\n      </div>\n      <div className=\"stack-small\">\n        {'Some icons'}\n        <div style={{ outline: '0.2rem solid orange' }}>\n          <Icon type=\"caret-up\" />\n          <Icon type=\"play-circle\" />\n          <Icon type=\"radar-chart\" />\n          <Icon type=\"heat-map\" />\n        </div>\n        {'Some sliders and switches'}\n        <div style={{ outline: '0.2rem solid orange' }}>\n          <Slider defaultValue={30} disabled={true} />\n          <Slider range defaultValue={[20, 50]} disabled={false} />\n          {'Disabled:'}\n          <Switch size=\"small\" checked={false} style={{ width: '33%' }} />\n          {'Enabled:'}\n          <Switch size=\"small\" checked={true} style={{ width: '50%' }} />\n        </div>\n        <Button type=\"primary\" shape=\"circle\" icon=\"search\" />\n        <Button type=\"primary\">\n          <span>Button with icon</span>\n          <Icon type=\"taobao\" />\n        </Button>\n        <Button type=\"dashed\" icon=\"search\">\n          Search\n        </Button>\n      </div>\n      <Button type=\"primary\">\n        <span>Button with icon</span>\n        <Icon type=\"taobao\" />\n      </Button>\n    </div>\n  );\n};\n","import { BehaviorSubject, fromEvent } from 'rxjs';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nconst makeObservableOfClickEventsOnTarget = (\n  eventTarget: FromEventTarget<MouseEvent>\n) => {\n  return fromEvent(eventTarget, 'click');\n};\n\nexport const makeObservableOfClickEventsOnDiv = (div: HTMLDivElement) =>\n  makeObservableOfClickEventsOnTarget(div);\n\n// Initial state of the Board component.\nconst initialState = {\n  clickCount: 0,\n};\n\n/**\n * Observable that emits new values to all of its subscribers every time the\n * state of the Board changes. It starts with an initial state.\n */\nexport const BoardSubject = new BehaviorSubject(initialState);\n","import React from 'react';\n\ninterface IProps {\n  events: any;\n}\n\nexport const EventsList: React.FC<IProps> = props => {\n  const { events } = props;\n  return (\n    <div>\n      <p>{`Got ${events.length} events`}</p>\n      <ol>\n        {events.map((ev: any) => (\n          <li\n            key={ev.timestamp}\n          >{`ts: ${ev.timestamp} x: ${ev.x}; y: ${ev.y} clientX: ${ev.clientX} clientY: ${ev.clientY}`}</li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from 'react';\nimport { fromEvent, Observable, Observer } from 'rxjs';\nimport { useEventCallback } from 'rxjs-hooks';\nimport { filter, map, pairwise, scan, take, tap } from 'rxjs/operators';\n\nimport { useSharedState } from '../../hooks';\nimport { ShapePickerSubject } from '../Sidebar';\nimport { BoardSubject } from './observables';\nimport { makeCircleFromPairClicks, makeTriangleFromTriplet } from './observers';\n\nimport { EventsList } from '../EventsList';\nimport styles from './styles.module.css';\n\nconst subscriberFunction = (ob: Observer<string | boolean>) => {\n  ob.next('ciao');\n  ob.next('helloooo');\n  ob.next('bye');\n  ob.next(true);\n  // ob.next({ a: 123, b: \"456\" });\n};\n\nconst observable = Observable.create(subscriberFunction);\n\nconst obsModified = observable.pipe(\n  take(40),\n  pairwise(),\n  tap(x => {\n    console.warn('DEBUG after take', x);\n  }),\n  map((x: string) => `${x}`),\n  tap(x => {\n    console.warn('DEBUG after map', x);\n  }),\n  filter((x: string) => x.length > 5),\n  tap(x => {\n    console.warn('DEBUG after filter', x);\n  })\n);\n\nconst observer = {\n  complete: () => console.log('COMPLETE'),\n  error: (error: any) => console.log(error),\n  next: (value: string) => console.log('NEXT value', value),\n};\n\nconst subscriber = obsModified.subscribe(observer);\nconsole.warn(\n  'observable',\n  observable,\n  'obsModified',\n  obsModified,\n  'subscriber',\n  subscriber\n);\n\nsubscriber.unsubscribe();\n\nconst observableOfClicks = fromEvent<MouseEvent>(document, 'click');\n\nconst observableOfPairClicks = observableOfClicks.pipe(pairwise());\n\ntype PairClicks = [MouseEvent, MouseEvent];\ntype TripletClicks = [MouseEvent, MouseEvent, MouseEvent];\n\nconst makeTripletOfClicks = (events: [PairClicks, PairClicks]) => {\n  const ev0 = events[0][0];\n  const ev1 = events[0][1];\n  const ev2 = events[1][1];\n  const triplet = [ev0, ev1, ev2] as TripletClicks;\n  return triplet;\n};\n\nconst observableOfTripletClicks = observableOfClicks.pipe(\n  pairwise(),\n  pairwise(),\n  map(makeTripletOfClicks)\n);\n\nobservableOfPairClicks.subscribe(makeCircleFromPairClicks);\nobservableOfTripletClicks.subscribe(makeTriangleFromTriplet);\n\ninterface IProps {\n  text: string;\n}\n\ninterface IEvent {\n  clientX: number;\n  clientY: number;\n  timestamp: number;\n  x: number;\n  y: number;\n}\n\nexport const TEST_ID_CONTAINER = 'board-container-test-id';\nexport const TEST_ID_P = 'board-p-test-id';\n\nexport const Board: React.FC<IProps> = props => {\n  const { text } = props;\n\n  const [{ clickCount }, setState] = useSharedState(BoardSubject);\n  const [{ shape }] = useSharedState(ShapePickerSubject);\n\n  const onClick = () => {\n    setState({ clickCount: clickCount + 1 });\n  };\n\n  // const ref = useRef<HTMLDivElement>(null);\n\n  // useEffect(() => {\n  //   if (!ref.current) {\n  //     throw new Error(\"ASSERT: ref.current is mounted in the DOM\");\n  //   }\n  //   const observableEvent = fromEvent(ref.current, \"click\");\n  //   observableEvent.subscribe(myObserver);\n  // }, [ref]);\n\n  const accumulator = (\n    acc: IEvent[],\n    ev: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    return [\n      ...acc,\n      {\n        clientX: ev.clientX,\n        clientY: ev.clientY,\n        timestamp: ev.timeStamp,\n        x: ev.screenX,\n        y: ev.screenY,\n      },\n    ];\n  };\n\n  const [clickCallback, events] = useEventCallback<\n    React.MouseEvent<HTMLElement, MouseEvent>,\n    IEvent[]\n  >(event$ => {\n    return event$.pipe(scan(accumulator, []));\n  }, []);\n\n  return (\n    <div\n      className={styles.board}\n      data-testid={TEST_ID_CONTAINER}\n      onClick={clickCallback}\n      // ref={ref}\n    >\n      <h1>{text}</h1>\n      <p\n        data-testid={TEST_ID_P}\n        onClick={onClick}\n        style={{ outline: '0.2rem solid orange' }}\n      >{`Draw a ${shape} (this is clickable)`}</p>\n      <EventsList events={events} />\n      {events.length && (\n        <svg\n          height=\"100%\"\n          width=\"100%\"\n          viewBox=\"0 0 600 400\"\n          style={{ outline: '1px dashed orange' }}\n        >\n          <circle\n            cx={events[events.length - 1].clientX}\n            cy={events[events.length - 1].clientY}\n            r=\"40\"\n            stroke=\"black\"\n            strokeWidth=\"3\"\n            fill={events.length % 2 ? 'red' : 'green'}\n          />\n          <text\n            className={styles['circle-center']}\n            x={events[events.length - 1].clientX}\n            y={events[events.length - 1].clientY}\n          >\n            {`x: ${events[events.length - 1].clientX}; y: ${events[events.length - 1].clientY}`}\n          </text>\n        </svg>\n      )}\n    </div>\n  );\n};\n","type PairClicks = [MouseEvent, MouseEvent];\ntype TripletClicks = [MouseEvent, MouseEvent, MouseEvent];\n\nexport const myObserver = {\n  complete: () => console.log('COMPLETE'),\n  error: (error: any) => {\n    throw error;\n  },\n  next: (event: Event) => {\n    // event.preventDefault();\n    // event.stopPropagation();\n    const eventTarget = event.target;\n    if (!eventTarget) {\n      throw new Error('The event must have a target');\n    }\n    if (event instanceof MouseEvent) {\n      const div = eventTarget as HTMLDivElement;\n      const domRect = div.getBoundingClientRect() as DOMRect;\n      const clientX = event.clientX;\n      const clientY = event.clientY;\n      console.warn('DOM Rect', domRect, 'event', event, clientX, clientY);\n    } else {\n      throw new Error('This event is not a mouse event');\n    }\n  },\n};\n\n/**\n * An observer that every time it receives a pair of click events, produces\n * the attributes required to draw a circle.\n */\nexport const makeCircleFromPairClicks = (pair: PairClicks) => {\n  const [ev0, ev1] = pair;\n  const cx = ev0.clientX;\n  const cy = ev0.clientY;\n  const x = ev1.clientX;\n  const y = ev1.clientY;\n  const r = Math.sqrt(\n    Math.pow(Math.abs(x - cx), 2) + Math.pow(Math.abs(y - cy), 2)\n  );\n  const circle = { cx, cy, r };\n  console.warn('circle', circle);\n};\n\n/**\n * An observer that every time it receives a triplet of click events, produces\n * the attributes required to draw a triangle.\n */\nexport const makeTriangleFromTriplet = (triplet: TripletClicks) => {\n  const [ev0, ev1, ev2] = triplet;\n  const a = { x: ev0.clientX, y: ev0.clientY };\n  const b = { x: ev1.clientX, y: ev1.clientY };\n  const c = { x: ev2.clientX, y: ev2.clientY };\n  const triangle = { a, b, c };\n  console.warn('triangle', triangle);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './css/index.css';\n\nimport { App } from './components/App';\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import React from 'react';\n\nimport { Board, BoardSubject } from '../Board';\nimport { ShapePickerSubject, Sidebar } from '../Sidebar';\n\nimport { useSharedState } from '../../hooks';\nimport styles from './styles.module.css';\n\nexport const App = () => {\n  const [{ clickCount }] = useSharedState(BoardSubject);\n  const [{ dropdownChangesCount }] = useSharedState(ShapePickerSubject);\n  return (\n    <div className={styles.app}>\n      <Board text={'Board'} />\n      <Sidebar label={'Choose a shape to draw:'} />\n      <div style={{ outline: '0.2rem solid orange' }}>\n        <p>{`Board was clicked ${clickCount} times`}</p>\n        <p>{`Dropdown changed ${dropdownChangesCount} times`}</p>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"styles-module__sidebar--179zX\",\"select\":\"styles-module__select--34NKF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"styles-module__board--1-URo\",\"circle-center\":\"styles-module__circle-center--2hzvi\"};"],"sourceRoot":""}