{"version":3,"sources":["components/Board/styles.module.css","components/ErrorBoundary/styles.module.css","components/ShapeStyleConfig/types.ts","hooks/index.ts","components/Board/utils.ts","components/Board/observables.ts","components/ShapeStyleConfig/observables.ts","components/Board/renderers/index.ts","components/Board/observers.ts","components/ShapeSelect/observables.ts","components/ShapeSelect/ShapeSelect.tsx","components/Board/Board.tsx","components/ErrorBoundary/FallbackUI.tsx","components/ErrorBoundary/ErrorBoundary.tsx","components/Main/Main.tsx","components/Exports/Exports.tsx","components/InteractionsLogger/InteractionsLogger.tsx","components/ShapeStyleConfig/ShapeStyleConfig.tsx","components/Sidebar/Sidebar.tsx","components/SidebarLayout/SidebarLayout.tsx","index.tsx","components/App/App.tsx"],"names":["module","exports","DashArray","useSharedState","subject","useState","getValue","state","setState","useEffect","subscription","pipe","skip","subscribe","unsubscribe","next","euclideanDistance","p","q","x0","y0","x1","y1","Math","sqrt","pow","makeCircleFromPairClicks","pair","ev0","ev1","cx","clientX","cy","clientY","r","makeTriangleFromTriplet","triplet","ev2","p0","x","y","p1","p2","pointFromEvent","event","makeTripletOfClicks","events","makeObservableOfMouseEventOnTarget","eventTarget","eventType","fromEvent","boardSubject$","BehaviorSubject","circlesDrawn","clickCount","coordinates","lastClick","trianglesDrawn","initialState","fill","opacity","stroke","undefined","shapeStyleConfigSubject$","NAMESPACE_URI","setStyleAttributes","el","config","initialShapeStyleConfigState","setAttribute","renderCircleInSVG","svg","circle","id","appendChild","c","document","createElementNS","makeSVGCircle","renderCircleFeedbackInSVG","querySelector","updateCircleInSVG","renderTriangleInSVG","triangle","polygon","makeSVGTriangle","makePointsString","acc","updateSVGPolygonElement","points","reduce","renderPolygonInSVG","makeSVGPolygon","renderPolygonFeedbackInSVG","updatePolygonInSVG","ShapeOption","makeObserverFeedbackPolygon","clicks","feedbackConfig","Four","complete","removeChild","cleanupPolygonFeedbackInSVG","makeObserverFeedbackCirle","cleanupCircleFeedbackInSVG","length","dropdownChangesCount","shape","Circle","shapePickerSubject$","ShapeSelect","setSharedState","className","clsx","htmlFor","data-testid","name","onChange","target","value","Triangle","Rectangle","BezierCurve","Board","shapeStyleConfig","refDiv","useRef","refSvg","current","Error","sub","click$","mousedown$","mousemove$","clickedPoints","clickSub","push","feedback$","debug","logEventOnlyInDebug","console","log","noop","twoClicks$","bufferCount","tap","mergeMap","takeUntil","makeObservableOfCircleFeedback","observer","threeClicks$","makeObservableOfTriangleFeedback","msg","circle$","pairwise","map","makeObservableOfCircles","triangle$","makeObservableOfTriangles","styles","board","ref","height","preserveAspectRatio","width","FallbackUI","props","error","errorInfo","eventId","onReportCrashButtonClick","toString","componentStack","onClick","ErrorBoundary","onReportCrash","Sentry","scope","setExtras","this","children","Fragment","React","Component","Main","saveAsPNG","saveSvgAsPng","scale","saveAsSVG","serializer","XMLSerializer","svgBlob","Blob","serializeToString","type","saveAs","Exports","style","display","flexDirection","fontSize","InteractionsLogger","ShapeStyleConfig","max","min","step","options","nativeEvent","srcElement","selectedIndex","label","Three","FiveTen","Odd","Even","Other","placeholder","Sidebar","SidebarLayout","noStretch","side","flexGrow","dsn","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6400dea8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"styles-module__board--1-URo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fallback-ui\":\"styles-module__fallback-ui--jafEg\"};","export enum DashArray {\n  Three = '3',\n  Four = '4',\n  FiveTen = '5 10',\n  Odd = '4 1 2',\n  Even = '4 1 2 3',\n  Other = '20 10 5 5 5 10',\n}\n\nexport interface ShapeStyleConfigState {\n  fill?: string;\n  opacity?: string;\n  stroke?: string;\n  'stroke-opacity'?: string;\n  'stroke-dasharray'?: DashArray;\n  'stroke-width'?: string;\n}\n","import { useEffect, useState } from 'react';\nimport { BehaviorSubject } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\nexport const useSharedState = <T>(\n  subject: BehaviorSubject<T>\n): [T, typeof useState] => {\n  const [state, setState] = useState(subject.getValue());\n\n  useEffect(() => {\n    const observer = (state: T): void => setState(state);\n    /*\n      The first event is skipped because a BehaviorSubject always notifies its\n      subscribers (i.e observers) of its initial state.\n    */\n    const subscription = subject.pipe(skip(1)).subscribe(observer);\n    return (): void => subscription.unsubscribe();\n  });\n\n  const newSetState = (state: T): void => subject.next(state);\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  return [state, newSetState];\n};\n","import { Circle, Point, Triangle } from './shapes';\nimport { Coords, PairClicks, TripletClicks } from './types';\n\nexport const euclideanDistance = (p: Coords, q: Coords): number => {\n  const [x0, y0] = p;\n  const [x1, y1] = q;\n  return Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n};\n\nexport const makeCircleFromPairClicks = (pair: PairClicks): Circle => {\n  const [ev0, ev1] = pair;\n  const cx = ev0.clientX;\n  const cy = ev0.clientY;\n  const r = euclideanDistance([cx, cy], [ev1.clientX, ev1.clientY]);\n  return { cx, cy, r };\n};\n\nexport const makeTriangleFromTriplet = (triplet: TripletClicks): Triangle => {\n  const [ev0, ev1, ev2] = triplet;\n  const p0 = { x: ev0.clientX, y: ev0.clientY };\n  const p1 = { x: ev1.clientX, y: ev1.clientY };\n  const p2 = { x: ev2.clientX, y: ev2.clientY };\n  return { p0, p1, p2 };\n};\n\nexport const pointFromEvent = (\n  event: React.MouseEvent<HTMLElement, MouseEvent> | MouseEvent\n): Point => {\n  const { clientX, clientY } = event;\n  return { x: clientX, y: clientY };\n};\n\nexport const makeTripletOfClicks = (\n  events: [PairClicks, PairClicks]\n): TripletClicks => {\n  const ev0 = events[0][0];\n  const ev1 = events[0][1];\n  const ev2 = events[1][1];\n  const triplet = [ev0, ev1, ev2] as TripletClicks;\n  return triplet;\n};\n","import { BehaviorSubject, fromEvent, Observable, noop } from 'rxjs';\nimport {\n  map,\n  pairwise,\n  mergeMap,\n  takeUntil,\n  tap,\n  bufferCount,\n} from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport { Coords } from './types';\nimport {\n  makeCircleFromPairClicks,\n  makeTriangleFromTriplet,\n  makeTripletOfClicks,\n} from './utils';\nimport { Circle, Triangle } from './shapes';\n\nexport const makeObservableOfMouseEventOnTarget = (\n  eventTarget: FromEventTarget<MouseEvent>,\n  eventType: 'click' | 'mousedown' | 'mousemove'\n): Observable<MouseEvent> => {\n  return fromEvent(eventTarget, eventType);\n};\n\nexport const makeObservableOfCircles = (\n  click$: Observable<MouseEvent>\n): Observable<Circle> => {\n  return click$.pipe(\n    pairwise(),\n    map(makeCircleFromPairClicks)\n  );\n};\n\nexport const makeObservableOfTriangles = (\n  click$: Observable<MouseEvent>\n): Observable<Triangle> => {\n  return click$.pipe(\n    pairwise(),\n    pairwise(),\n    map(makeTripletOfClicks),\n    map(makeTriangleFromTriplet)\n  );\n};\n\nexport const makeObservableOfCircleFeedback = (\n  click$: Observable<MouseEvent>,\n  mousedown$: Observable<MouseEvent>,\n  mousemove$: Observable<MouseEvent>,\n  debug?: boolean\n): Observable<MouseEvent> => {\n  const logEventOnlyInDebug = debug ? console.log : noop;\n\n  const twoClicks$ = click$.pipe(\n    bufferCount(2),\n    tap(logEventOnlyInDebug)\n  );\n\n  // after mousedown, take mousemove events until the second click.\n  return mousedown$.pipe(\n    mergeMap(() => {\n      return mousemove$;\n    }),\n    takeUntil(twoClicks$)\n  );\n};\n\nexport const makeObservableOfTriangleFeedback = (\n  click$: Observable<MouseEvent>,\n  mousedown$: Observable<MouseEvent>,\n  mousemove$: Observable<MouseEvent>,\n  debug?: boolean\n): Observable<MouseEvent> => {\n  const logEventOnlyInDebug = debug ? console.log : noop;\n\n  const threeClicks$ = click$.pipe(\n    bufferCount(3),\n    tap(logEventOnlyInDebug)\n  );\n\n  // after mousedown, take mousemove events until the third click.\n  return mousedown$.pipe(\n    mergeMap(() => {\n      return mousemove$;\n    }),\n    takeUntil(threeClicks$)\n  );\n};\n\ninterface State {\n  circlesDrawn: number;\n  clickCount: number;\n  coordinates: Coords[];\n  lastClick: Coords;\n  trianglesDrawn: number;\n}\n\nconst initialState: State = {\n  circlesDrawn: 0,\n  clickCount: 0,\n  coordinates: [] as Coords[],\n  lastClick: [0, 0] as Coords,\n  trianglesDrawn: 0,\n};\n\n/**\n * BehaviorSubject that represents this component's state over time.\n *\n * @see http://reactivex.io/rxjs/manual/overview.html#behaviorsubject\n */\nexport const boardSubject$ = new BehaviorSubject<State>(initialState);\n","import { BehaviorSubject } from 'rxjs';\n\nimport { ShapeStyleConfigState as State } from './types';\n\nexport const initialState: State = {\n  fill: '#FF5722',\n  opacity: '1',\n  stroke: '#6A1B9A',\n  'stroke-dasharray': undefined,\n  'stroke-opacity': '1',\n  'stroke-width': '1px',\n};\n\nexport const shapeStyleConfigSubject$ = new BehaviorSubject<State>(\n  initialState\n);\n","import { Circle, Point, Triangle } from '../shapes';\nimport { ShapeStyleConfigState } from '../../ShapeStyleConfig/types';\nimport { initialState as initialShapeStyleConfigState } from '../../ShapeStyleConfig/observables';\n\nconst NAMESPACE_URI = 'http://www.w3.org/2000/svg';\n\nconst CIRCLE_FEEDBACK_ID = 'circle-feedback';\nconst POLYGON_FEEDBACK_ID = 'polygon-feedback';\n\nconst setStyleAttributes = <T extends SVGElement>(\n  el: T,\n  config: ShapeStyleConfigState = initialShapeStyleConfigState\n): void => {\n  el.setAttribute('fill', config.fill || '');\n  el.setAttribute('opacity', config.opacity || '');\n  el.setAttribute('stroke', config.stroke || '');\n  el.setAttribute('stroke-dasharray', config['stroke-dasharray'] || '');\n  el.setAttribute('stroke-opacity', config['stroke-opacity'] || '');\n  el.setAttribute('stroke-width', config['stroke-width'] || '');\n};\n\nconst makeSVGCircle = (\n  c: Circle,\n  config?: ShapeStyleConfigState,\n  id?: string\n): SVGCircleElement => {\n  const circle = document.createElementNS(NAMESPACE_URI, 'circle');\n  circle.setAttribute('cx', `${c.cx}`);\n  circle.setAttribute('cy', `${c.cy}`);\n  circle.setAttribute('r', `${c.r}`);\n  setStyleAttributes(circle, config);\n  if (id) {\n    circle.setAttribute('id', id);\n  }\n  return circle;\n};\n\nexport const cleanupCircleFeedbackInSVG = (svg: SVGSVGElement): void => {\n  const el = document.querySelector(`#${CIRCLE_FEEDBACK_ID}`);\n  if (el) {\n    svg.removeChild(el);\n  }\n};\n\nexport const renderCircleInSVG = (\n  svg: SVGSVGElement,\n  circle: Circle,\n  config?: ShapeStyleConfigState,\n  id?: string\n): void => {\n  svg.appendChild(makeSVGCircle(circle, config, id));\n};\n\nconst updateCircleInSVG = (\n  el: SVGCircleElement,\n  c: Circle,\n  config?: ShapeStyleConfigState\n): void => {\n  el.setAttribute('cx', `${c.cx}`);\n  el.setAttribute('cy', `${c.cy}`);\n  el.setAttribute('r', `${c.r}`);\n  setStyleAttributes(el, config);\n};\n\n// TODO: render a dashed line connecting the center and the current mousemove event coordinates\nexport const renderCircleFeedbackInSVG = (\n  svg: SVGSVGElement,\n  circle: Circle,\n  config?: ShapeStyleConfigState\n): void => {\n  const el = document.querySelector(`#${CIRCLE_FEEDBACK_ID}`);\n  if (el) {\n    updateCircleInSVG(el as SVGCircleElement, circle, config);\n  } else {\n    renderCircleInSVG(svg, circle, config, CIRCLE_FEEDBACK_ID);\n  }\n};\n\nconst makeSVGTriangle = (\n  triangle: Triangle,\n  config?: ShapeStyleConfigState\n): SVGPolygonElement => {\n  const { p0, p1, p2 } = triangle;\n  const polygon = document.createElementNS(NAMESPACE_URI, 'polygon');\n  polygon.setAttribute(\n    'points',\n    `${p0.x},${p0.y} ${p1.x},${p1.y} ${p2.x},${p2.y}`\n  );\n  setStyleAttributes(polygon, config);\n  return polygon;\n};\n\nexport const renderTriangleInSVG = (\n  svg: SVGSVGElement,\n  triangle: Triangle,\n  config?: ShapeStyleConfigState\n): void => {\n  svg.appendChild(makeSVGTriangle(triangle, config));\n};\n\nconst makeSVGLine = (\n  p0: Point,\n  p1: Point,\n  config?: ShapeStyleConfigState,\n  id?: string\n): SVGLineElement => {\n  const line = document.createElementNS(NAMESPACE_URI, 'line');\n  line.setAttribute('x1', `${p0.x}`);\n  line.setAttribute('y1', `${p0.y}`);\n  line.setAttribute('x2', `${p1.x}`);\n  line.setAttribute('y2', `${p1.y}`);\n  setStyleAttributes(line, config);\n  if (id) {\n    line.setAttribute('id', id);\n  }\n  return line;\n};\n\nexport const renderLineInSVG = (\n  svg: SVGSVGElement,\n  p0: Point,\n  p1: Point,\n  config?: ShapeStyleConfigState,\n  id?: string\n): void => {\n  svg.appendChild(makeSVGLine(p0, p1, config, id));\n};\n\nconst makePointsString = (acc: string, p: Point): string => {\n  return `${acc}${p.x},${p.y} `;\n};\n\nexport const cleanupPolygonFeedbackInSVG = (svg: SVGSVGElement): void => {\n  const el = document.querySelector(`#${POLYGON_FEEDBACK_ID}`);\n  if (el) {\n    svg.removeChild(el);\n  }\n};\n\nconst updateSVGPolygonElement = (\n  el: SVGPolygonElement,\n  points: Point[],\n  config: ShapeStyleConfigState\n): void => {\n  el.setAttribute('points', points.reduce(makePointsString, ''));\n  setStyleAttributes(el, config);\n};\n\nconst makeSVGPolygon = (\n  points: Point[],\n  config: ShapeStyleConfigState,\n  id: string\n): SVGPolygonElement => {\n  const el = document.createElementNS(NAMESPACE_URI, 'polygon');\n  el.setAttribute('id', id);\n  updateSVGPolygonElement(el, points, config);\n  return el;\n};\n\nexport const renderPolygonInSVG = (\n  svg: SVGSVGElement,\n  points: Point[],\n  config: ShapeStyleConfigState,\n  id: string\n): void => {\n  svg.appendChild(makeSVGPolygon(points, config, id));\n};\n\nconst updatePolygonInSVG = (\n  el: SVGPolygonElement,\n  points: Point[],\n  config: ShapeStyleConfigState\n): void => {\n  updateSVGPolygonElement(el, points, config);\n};\n\nexport const renderPolygonFeedbackInSVG = (\n  svg: SVGSVGElement,\n  points: Point[],\n  config: ShapeStyleConfigState\n): void => {\n  const el = document.querySelector(`#${POLYGON_FEEDBACK_ID}`);\n  if (el) {\n    updatePolygonInSVG(el as SVGPolygonElement, points, config);\n  } else {\n    renderPolygonInSVG(svg, points, config, POLYGON_FEEDBACK_ID);\n  }\n};\n","import { PartialObserver } from 'rxjs';\n\nimport {\n  renderPolygonFeedbackInSVG,\n  renderCircleFeedbackInSVG,\n  cleanupPolygonFeedbackInSVG,\n  cleanupCircleFeedbackInSVG,\n} from './renderers';\nimport { Point } from './shapes';\nimport { ShapeStyleConfigState, DashArray } from '../ShapeStyleConfig/types';\nimport { pointFromEvent, euclideanDistance } from './utils';\n\nexport const makeObserverFeedbackPolygon = (\n  svg: SVGSVGElement,\n  clicks: Point[],\n  config: ShapeStyleConfigState\n): PartialObserver<MouseEvent> => {\n  const feedbackConfig = {\n    ...config,\n    'stroke-dasharray': DashArray.Four,\n  };\n  return {\n    complete: (): void => {\n      cleanupPolygonFeedbackInSVG(svg);\n    },\n\n    next: (event: MouseEvent): void => {\n      const points = [...clicks, pointFromEvent(event)];\n      renderPolygonFeedbackInSVG(svg, points, feedbackConfig);\n    },\n  };\n};\n\nexport const makeObserverFeedbackCirle = (\n  svg: SVGSVGElement,\n  clicks: Point[],\n  config: ShapeStyleConfigState\n): PartialObserver<MouseEvent> => {\n  const feedbackConfig = {\n    ...config,\n    'stroke-dasharray': DashArray.Four,\n  };\n  return {\n    complete: (): void => {\n      cleanupCircleFeedbackInSVG(svg);\n    },\n\n    next: (event: MouseEvent): void => {\n      if (clicks.length) {\n        const points = [...clicks, pointFromEvent(event)];\n        const [p0, p1] = points;\n        const r = euclideanDistance([p0.x, p0.y], [p1.x, p1.y]);\n        const circle = {\n          cx: p0.x,\n          cy: p0.y,\n          r,\n        };\n        renderCircleFeedbackInSVG(svg, circle, feedbackConfig);\n      }\n    },\n  };\n};\n","import { BehaviorSubject } from 'rxjs';\n\nexport enum ShapeOption {\n  BezierCurve = 'Bezier Curve',\n  Circle = 'Circle',\n  Rectangle = 'Rectangle',\n  Triangle = 'Triangle',\n}\n\ninterface State {\n  dropdownChangesCount: number;\n  shape: ShapeOption;\n}\n\nexport const initialState: State = {\n  dropdownChangesCount: 0,\n  shape: ShapeOption.Circle,\n};\n\n/**\n * BehaviorSubject that represents this component's state over time.\n *\n * @see http://reactivex.io/rxjs/manual/overview.html#behaviorsubject\n */\nexport const shapePickerSubject$ = new BehaviorSubject<State>(initialState);\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { ShapeOption, shapePickerSubject$ } from './observables';\n\nexport const SHAPE_SELECT_TEST_ID = 'sidebar-select-test-id';\nconst SHAPE_SELECT_ID = 'shape-select-id';\nconst SHAPE_SELECT_NAME = 'shape-selector';\n\nexport const ShapeSelect: React.FC<{}> = () => {\n  const [state, setSharedState] = useSharedState(shapePickerSubject$);\n\n  const onShapeChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    setSharedState({\n      dropdownChangesCount: state.dropdownChangesCount + 1,\n      shape: event.target.value as ShapeOption,\n    });\n  };\n\n  return (\n    <div className={clsx('font-size:biggish')}>\n      <label htmlFor={SHAPE_SELECT_ID}>{SHAPE_SELECT_NAME}</label>\n      <div className=\"box\">\n        <select\n          id={SHAPE_SELECT_ID}\n          data-testid={SHAPE_SELECT_TEST_ID}\n          name={SHAPE_SELECT_NAME}\n          onChange={onShapeChange}\n        >\n          <option value={ShapeOption.Circle}>Circle</option>\n          <option value={ShapeOption.Triangle}>Triangle</option>\n          <option value={ShapeOption.Rectangle}>Rectangle</option>\n          <option value={ShapeOption.BezierCurve}>Bezier Curve</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { useSharedState } from '../../hooks';\nimport {\n  boardSubject$,\n  makeObservableOfCircleFeedback,\n  makeObservableOfCircles,\n  makeObservableOfTriangles,\n  makeObservableOfTriangleFeedback,\n  makeObservableOfMouseEventOnTarget,\n} from './observables';\nimport {\n  makeObserverFeedbackCirle,\n  makeObserverFeedbackPolygon,\n} from './observers';\nimport { renderCircleInSVG, renderTriangleInSVG } from './renderers';\nimport { Circle, Point, Triangle } from './shapes';\nimport { pointFromEvent } from './utils';\nimport { shapePickerSubject$, ShapeOption } from '../ShapeSelect';\nimport { shapeStyleConfigSubject$ } from '../ShapeStyleConfig/observables';\n\nimport styles from './styles.module.css';\n\nexport const DIV_CONTAINER_TEST_ID = 'board-container-test-id';\nexport const SVG_BOARD_TEST_ID = 'board-svg-test-id';\n\nconst REF_NOT_READY = 'ASSERT: ref NOT ready!';\n\nconst DEBUG = false;\n// const DEBUG = true;\n\nexport const Board: React.FC<{}> = () => {\n  const [state, setSharedState] = useSharedState(boardSubject$);\n  const [{ shape }] = useSharedState(shapePickerSubject$);\n  const [shapeStyleConfig] = useSharedState(shapeStyleConfigSubject$);\n\n  const refDiv = useRef<HTMLDivElement>(null);\n  const refSvg = useRef<SVGSVGElement>(null);\n\n  useEffect(() => {\n    if (!refSvg.current) {\n      throw new Error(REF_NOT_READY);\n    }\n\n    // --- Observables from simple mouse events ($) --- //\n    const click$ = makeObservableOfMouseEventOnTarget(refSvg.current, 'click');\n    const mousedown$ = makeObservableOfMouseEventOnTarget(\n      refSvg.current,\n      'mousedown'\n    );\n    const mousemove$ = makeObservableOfMouseEventOnTarget(\n      refSvg.current,\n      'mousemove'\n    );\n\n    /**\n     * Keep track of all click events until the dependencies of this React\n     * `useEffect` hook trigger a re-run of this side-effect.\n     */\n    const clickedPoints: Point[] = [];\n    const clickObserver = (event: MouseEvent): void => {\n      clickedPoints.push(pointFromEvent(event));\n    };\n    const clickSub = click$.subscribe(clickObserver);\n\n    /**\n     * Create a subscription for each visual feedback when drawing a shape.\n     * Every time a new user interaction contributes to the definition of a\n     * shape (e.g. the 1st/2nd/3rd click when drawing a triangle), this\n     * component re-renders this visual aid (it does NOT update the state, but\n     * it does depend on the state).\n     */\n    let sub: Subscription;\n    switch (shape) {\n      case ShapeOption.Circle: {\n        const feedback$ = makeObservableOfCircleFeedback(\n          click$,\n          mousedown$,\n          mousemove$,\n          DEBUG\n        );\n        const observer = makeObserverFeedbackCirle(\n          refSvg.current,\n          clickedPoints,\n          shapeStyleConfig\n        );\n        sub = feedback$.subscribe(observer);\n        break;\n      }\n\n      case ShapeOption.Triangle: {\n        const feedback$ = makeObservableOfTriangleFeedback(\n          click$,\n          mousedown$,\n          mousemove$,\n          DEBUG\n        );\n        const observer = makeObserverFeedbackPolygon(\n          refSvg.current,\n          clickedPoints,\n          shapeStyleConfig\n        );\n        sub = feedback$.subscribe(observer);\n        break;\n      }\n\n      default:\n        const msg = `TODO: ${shape} not yet implemented`;\n        throw new Error(msg);\n    }\n\n    // Cleanup subscriptions so we don't introduce memory leaks.\n    // https://reactjs.org/docs/hooks-effect.html#example-using-hooks-1\n    return function cleanup(): void {\n      clickSub.unsubscribe();\n      if (sub) {\n        sub.unsubscribe();\n      }\n    };\n\n    /*\n     * This side-effect hook needs to re-run every time a new triangle is drawn\n     * because we need to call the observable's factory\n     * `makeObservableOfTriangleFeedback`, so that factory can create once again\n     * an observable that completes after 3 click events on the SVG board (we\n     * want an observable that completes so we can ckeanup the SVG board in the\n     * observer subscribed to this observable).\n     */\n  }, [\n    refSvg,\n    shape,\n    shapeStyleConfig,\n    state.circlesDrawn,\n    state.trianglesDrawn,\n  ]);\n\n  useEffect(() => {\n    if (!refSvg.current) {\n      throw new Error(REF_NOT_READY);\n    }\n\n    const click$ = makeObservableOfMouseEventOnTarget(refSvg.current, 'click');\n\n    /**\n     * Create a subscription for each shape.\n     * Every time a new shape is created by the user, this component re-renders\n     * the shape and updates the state.\n     */\n    let sub: Subscription;\n    switch (shape) {\n      case ShapeOption.Circle: {\n        const circle$ = makeObservableOfCircles(click$);\n        const observer = (circle: Circle): void => {\n          if (refSvg.current) {\n            renderCircleInSVG(refSvg.current, circle, shapeStyleConfig);\n          }\n          setSharedState({\n            ...state,\n            circlesDrawn: state.circlesDrawn + 1,\n            clickCount: state.clickCount + 2,\n            lastClick: [circle.cx, circle.cy],\n          });\n        };\n\n        sub = circle$.subscribe(observer);\n        break;\n      }\n\n      case ShapeOption.Triangle: {\n        const triangle$ = makeObservableOfTriangles(click$);\n        const observer = (triangle: Triangle): void => {\n          if (refSvg.current) {\n            renderTriangleInSVG(refSvg.current, triangle, shapeStyleConfig);\n          }\n          setSharedState({\n            ...state,\n            clickCount: state.clickCount + 3,\n            trianglesDrawn: state.trianglesDrawn + 1,\n          });\n        };\n\n        sub = triangle$.subscribe(observer);\n        break;\n      }\n\n      default:\n        const msg = `TODO: ${shape} not yet implemented`;\n        throw new Error(msg);\n    }\n\n    return (): void => {\n      if (sub) {\n        sub.unsubscribe();\n      }\n    };\n  }, [setSharedState, shape, shapeStyleConfig, state]);\n\n  return (\n    <div\n      className={styles.board}\n      data-testid={DIV_CONTAINER_TEST_ID}\n      ref={refDiv}\n    >\n      <svg\n        data-testid={SVG_BOARD_TEST_ID}\n        height=\"100%\"\n        preserveAspectRatio={'xMinYMin meet'}\n        ref={refSvg}\n        width=\"100%\"\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport styles from './styles.module.css';\n\nexport const DIV_CONTAINER_TEST_ID = 'fallback-ui-div-container-test-id';\n\ninterface Props {\n  error: Error;\n  errorInfo?: React.ErrorInfo;\n  eventId?: string;\n  onReportCrashButtonClick: () => void;\n}\n\nexport const FallbackUI: React.FC<Props> = props => {\n  const { error, errorInfo, eventId, onReportCrashButtonClick } = props;\n\n  return (\n    <div className={styles['fallback-ui']} data-testid={DIV_CONTAINER_TEST_ID}>\n      <h1>Something went wrong.</h1>\n      <details>\n        {error.toString()}\n        <br />\n        {errorInfo && errorInfo.componentStack}\n      </details>\n      {eventId && (\n        <button onClick={onReportCrashButtonClick}>Report feedback</button>\n      )}\n    </div>\n  );\n};\n","import * as Sentry from '@sentry/browser';\nimport React, { ErrorInfo } from 'react';\n\nimport { FallbackUI } from './FallbackUI';\n\ninterface Props {\n  debug?: boolean;\n}\n\ninterface State {\n  error?: Error;\n  errorInfo?: ErrorInfo;\n  eventId?: string;\n}\n\nexport class ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { error: undefined, errorInfo: undefined, eventId: undefined };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    Sentry.withScope(scope => {\n      scope.setExtras(errorInfo);\n      const eventId = Sentry.captureException(error);\n      this.setState({ error, errorInfo, eventId });\n    });\n  }\n\n  public render(): JSX.Element {\n    const { children, debug } = this.props;\n    const { error, errorInfo, eventId } = this.state;\n\n    if (error && debug) {\n      console.error('--- ERROR ---', error);\n    }\n\n    return error ? (\n      <FallbackUI\n        error={error}\n        errorInfo={errorInfo}\n        eventId={eventId}\n        onReportCrashButtonClick={this.onReportCrash}\n      />\n    ) : (\n      <React.Fragment>{children}</React.Fragment>\n    );\n  }\n\n  private onReportCrash = (): void => {\n    Sentry.showReportDialog({ eventId: this.state.eventId });\n  };\n}\n","import React from 'react';\n\n// import { useSharedState } from '../../hooks';\nimport { Board } from '../Board';\n// import { Board, boardSubject$ } from '../Board';\nimport { ErrorBoundary } from '../ErrorBoundary';\n// import { EventsList } from '../EventsList';\n\n// import styles from './styles.module.css';\n\nexport const Main: React.FC<{}> = () => {\n  //   const [{ coordinates }] = useSharedState(boardSubject$);\n  return (\n    <ErrorBoundary debug={true}>\n      <Board />\n    </ErrorBoundary>\n  );\n  //   return (\n  //     <div className={styles.main}>\n  //       <ErrorBoundary debug={true}>\n  //         <Board />\n  //       </ErrorBoundary>\n  //       <EventsList coordinates={coordinates} />\n  //     </div>\n  //   );\n};\n","import clsx from 'clsx';\nimport { saveAs } from 'file-saver';\nimport React from 'react';\nimport { saveSvgAsPng } from 'save-svg-as-png';\n\nconst saveAsPNG = (): void => {\n  const svg = document.querySelector('svg');\n  if (svg) {\n    saveSvgAsPng(svg, 'drawing.png', {\n      scale: 0.5,\n    });\n  }\n};\n\nconst saveAsSVG = (): void => {\n  const svg = document.querySelector('svg');\n  if (svg) {\n    const serializer = new XMLSerializer();\n    const svgBlob = new Blob([serializer.serializeToString(svg)], {\n      type: 'image/svg+xml',\n    });\n    saveAs(svgBlob, 'disegno.svg');\n  }\n};\n\nexport const Exports: React.FC<{}> = () => {\n  return (\n    <div className={clsx('font-size:biggish')}>\n      <label>Exports</label>\n      <div\n        className={clsx('box', 'stack')}\n        style={{ display: 'flex', flexDirection: 'column' }}\n      >\n        <button onClick={saveAsSVG} style={{ fontSize: '1em' }} type=\"button\">\n          Save as SVG\n        </button>\n        <button onClick={saveAsPNG} style={{ fontSize: '1em' }} type=\"button\">\n          Save as PNG\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { boardSubject$ } from '../Board';\nimport { shapePickerSubject$ } from '../ShapeSelect';\n\nexport const InteractionsLogger: React.FC<{}> = () => {\n  const [{ circlesDrawn, clickCount, trianglesDrawn }] = useSharedState(\n    boardSubject$\n  );\n  const [{ shape }] = useSharedState(shapePickerSubject$);\n\n  return (\n    <div className=\"stack\">\n      <p>{`Selected shape: ${shape}`}</p>\n      <p>{`Click count: ${clickCount}`}</p>\n      <p>{`Circles drawn: ${circlesDrawn}`}</p>\n      <p>{`Triangles drawn: ${trianglesDrawn}`}</p>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { useSharedState } from '../../hooks';\nimport { shapePickerSubject$ } from '../ShapeSelect';\nimport { shapeStyleConfigSubject$ } from './observables';\nimport { DashArray } from './types';\n\nexport const ShapeStyleConfig: React.FC<{}> = () => {\n  const [{ shape }] = useSharedState(shapePickerSubject$);\n  const [state, setSharedState] = useSharedState(shapeStyleConfigSubject$);\n\n  const onFillChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    setSharedState({\n      ...state,\n      fill: event.target.value,\n    });\n  };\n\n  const onOpacityChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    setSharedState({\n      ...state,\n      opacity: event.target.value,\n    });\n  };\n\n  const onStrokeChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    setSharedState({\n      ...state,\n      stroke: event.target.value,\n    });\n  };\n\n  const onStrokeDashArrayChange: React.ChangeEventHandler<\n    HTMLSelectElement\n  > = event => {\n    const options = (event.nativeEvent.srcElement as HTMLSelectElement).options;\n    setSharedState({\n      ...state,\n      'stroke-dasharray': options[options.selectedIndex].value,\n    });\n  };\n\n  const onStrokeOpacityChange: React.ChangeEventHandler<\n    HTMLInputElement\n  > = event => {\n    setSharedState({\n      ...state,\n      'stroke-opacity': event.target.value,\n    });\n  };\n\n  const onStrokeWidthChange: React.ChangeEventHandler<\n    HTMLInputElement\n  > = event => {\n    setSharedState({\n      ...state,\n      'stroke-width': event.target.value,\n    });\n  };\n\n  return (\n    <div className={'font-size:biggish'}>\n      <label>{`Config style for ${shape}`}</label>\n      <div className={clsx('box')}>\n        <div>\n          <label htmlFor=\"fill\">fill</label>\n          <input\n            id=\"fill\"\n            name=\"fill\"\n            onChange={onFillChange}\n            type=\"color\"\n            value={state.fill}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"opacity\">opacity</label>\n          <input\n            id=\"opacity\"\n            max=\"1\"\n            min=\"0\"\n            name=\"opacity\"\n            onChange={onOpacityChange}\n            step=\"0.1\"\n            type=\"number\"\n            value={state.opacity}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"stroke\">stroke</label>\n          <input\n            id=\"stroke\"\n            name=\"stroke\"\n            onChange={onStrokeChange}\n            type=\"color\"\n            value={state.stroke}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"stroke-dasharray\">stroke-dasharray</label>\n          <select\n            id=\"stroke-dasharray\"\n            name=\"stroke-dasharray\"\n            onChange={onStrokeDashArrayChange}\n          >\n            <option value={'none'}>No dashes nor gaps</option>\n            <optgroup label=\"Dashes and gaps of the same size\">\n              <option value={DashArray.Three}>{DashArray.Three}</option>\n              <option value={DashArray.Four}>{DashArray.Four}</option>\n            </optgroup>\n            <optgroup label=\"Dashes and gaps of different size\">\n              <option value={DashArray.FiveTen}>{DashArray.FiveTen}</option>\n              <option value={DashArray.Odd}>{DashArray.Odd}</option>\n              <option value={DashArray.Even}>{DashArray.Even}</option>\n              <option value={DashArray.Other}>{DashArray.Other}</option>\n            </optgroup>\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"stroke-opacity\">stroke-opacity</label>\n          <input\n            id=\"stroke-opacity\"\n            max=\"1\"\n            min=\"0\"\n            name=\"stroke-opacity\"\n            onChange={onStrokeOpacityChange}\n            step=\"0.1\"\n            type=\"number\"\n            value={state['stroke-opacity']}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"stroke-width\">stroke-width</label>\n          <input\n            id=\"stroke-width\"\n            name=\"stroke-width\"\n            onChange={onStrokeWidthChange}\n            placeholder=\"e.g. 20px\"\n            type=\"text\"\n            value={state['stroke-width']}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport { Exports } from '../Exports';\nimport { InteractionsLogger } from '../InteractionsLogger';\nimport { ShapeSelect } from '../ShapeSelect';\nimport { ShapeStyleConfig } from '../ShapeStyleConfig';\n\nexport const DIV_CONTAINER_TEST_ID = 'sidebar-container-test-id';\n\nexport const Sidebar: React.FC<{}> = () => {\n  return (\n    <div className={clsx('stack')} data-testid={DIV_CONTAINER_TEST_ID}>\n      <ShapeSelect />\n      <ShapeStyleConfig />\n      <Exports />\n      <InteractionsLogger />\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React, { useEffect } from 'react';\n\ninterface Props {\n  /**\n   * The sidebar and the non-sidebar element.\n   */\n  children: React.ReactElement[];\n\n  /**\n   * Make the adjacent elements adopt their natural height.\n   */\n  noStretch?: boolean;\n\n  /**\n   * The side where the sidebar is on.\n   */\n  side: 'left' | 'right';\n}\n\nexport const SidebarLayout: React.FC<Props> = props => {\n  const { children, noStretch, side } = props;\n\n  useEffect(() => {\n    if (children.length !== 2) {\n      throw new Error('The Sidebar layout must have exactly 2 children');\n    }\n  }, [children, side]);\n\n  return (\n    <div\n      className={clsx(`with-sidebar-on-the-${side}`)}\n      style={{ height: '100%', flexGrow: 1 }}\n    >\n      <div\n        className={clsx(\n          noStretch ? 'not-stretched-wrapper' : 'stretched-wrapper'\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n","import * as Sentry from '@sentry/browser';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App';\n\nimport './css/index.css';\n\n/**\n * We could use the CDN hosted version of the Sentry JavaScript browser SDK, but\n * Ad blockers would probably block Sentry from submitting crash reports.\n * Instead, we add Sentry as a dependency (unfortunately, this means that it\n * will end up in the final bundle).\n */\nSentry.init({\n  dsn: 'https://94f09b0a51c74127b82e3fa4d47857c2@sentry.io/1547393',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\n\nimport { Main } from '../Main';\nimport { Sidebar } from '../Sidebar';\nimport { SidebarLayout } from '../SidebarLayout';\n\nexport const App: React.FC<{}> = () => {\n  return (\n    <SidebarLayout side={'right'}>\n      <Main />\n      <Sidebar />\n    </SidebarLayout>\n  );\n};\n"],"sourceRoot":""}