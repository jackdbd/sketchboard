{"version":3,"sources":["styles.module.css","variables.css","defaults.css","box-layout.css","sidebar-layout.css","stack-layout.css","utility-classes.css"],"names":[],"mappings":"AAAA,6BACE,kCAAmC,CACnC,gBAAiB,CACjB,iBACF,CAJA,mCACE,kBACF,CAEA,2CACE,cAAe,CACf,oBACF,CCPA,MAME,WAAY,CACZ,mCAAsC,CACtC,mCAAsC,CACtC,mCAAsC,CACtC,mCAAsC,CACtC,kCAAqC,CACrC,SAAU,CACV,iCAAoC,CACpC,iCAAoC,CACpC,iCAAoC,CACpC,iCAAoC,CACpC,iCAAoC,CAEpC,qBAAsB,CACtB,2BAA4B,CAC5B,uBAAwB,CAExB,6BAA8B,CAE9B,0BAA2B,CAC3B,oBACF,CC3BA,EACE,qBAAsB,CACtB,uCACF,CAEA,KACE,QACF,CCPA,KACE,wCAAyC,CACzC,uBAAwB,CACxB,iBACF,CAEA,OACE,aACF,CCJA,qDAGE,kBAAmB,CAEnB,eACF,CAEA,yDAEE,YAAa,CAEb,cAAe,CAGf,+BACF,CAEA,uBACE,sBACF,CAEA,mBACE,mBACF,CAEA,6DAEE,gBAAiB,CAEjB,WAAY,CACZ,4BACF,CAGA,kFAGE,YAAa,CAEb,aAAc,CAEd,mCACF,CCxCA,OACE,OAAQ,CACR,OAAQ,CACR,OAAQ,CACR,uCAA0C,CAC1C,qCACF,CAMA,iBACE,eAAgB,CAChB,YACF,CAEA,WAEE,uBACF,CAEA,iBACE,mDAAsD,CAEtD,+BACF,CAEA,iBACE,mDAAsD,CAEtD,iCACF,CCvBA,iBACE,yCACF,CAEA,oBACE,4CACF,CAEA,gBACE,wCACF","file":"main.34e39cce.chunk.css","sourcesContent":[".fallback-ui {\n  background: forestgreen;\n}\n\n.fallback-ui > details {\n  font-size: 3rem;\n  white-space: pre-wrap;\n}\n",":root {\n  /*\n    Modular scale. We divide or multiply by a ratio to create the points on the\n    modular scale.\n    https://every-layout.dev/rudiments/modular-scale/\n  */\n  --ratio: 1.5;\n  --s-5: calc(var(--s-4) / var(--ratio));\n  --s-4: calc(var(--s-3) / var(--ratio));\n  --s-3: calc(var(--s-2) / var(--ratio));\n  --s-2: calc(var(--s-1) / var(--ratio));\n  --s-1: calc(var(--s0) / var(--ratio));\n  --s0: 1rem;\n  --s1: calc(var(--s0) * var(--ratio));\n  --s2: calc(var(--s1) * var(--ratio));\n  --s3: calc(var(--s2) * var(--ratio));\n  --s4: calc(var(--s3) * var(--ratio));\n  --s5: calc(var(--s4) * var(--ratio));\n\n  --font-size-base: 1rem;\n  --font-size-biggish: 1.75rem;\n  --font-size-big: 2.25rem;\n\n  --typography-line-height: 1rem;\n\n  --color-background: #d9d9d9;\n  --color-font: hsl(0, 10%, 10%);\n}\n","* {\n  box-sizing: border-box;\n  font-family: 'Port Lligat Sans', sans-serif;\n}\n\nbody {\n  margin: 0;\n}\n",".box {\n  background-color: var(--color-background);\n  color: var(--color-font);\n  padding: var(--s1);\n}\n\n.box * {\n  color: inherit;\n}\n","/*\n  The class to give the component to establish a Sidebar layout.\n  https://absolutely.every-layout.dev/layouts/sidebar/\n*/\n.with-sidebar-on-the-left,\n.with-sidebar-on-the-right {\n  /* The space between the sidebar element and the non-sidebar element */\n  --gutter: var(--s1);\n  /* Suppress scrolling sometimes caused by the overflow */\n  overflow: hidden;\n}\n\n.with-sidebar-on-the-left > *,\n.with-sidebar-on-the-right > * {\n  display: flex;\n  /* If there isn't enough space, don't overflow, wrap on next row instead */\n  flex-wrap: wrap;\n  /* Negative margin hack for the element that wraps both the sidebar and the\n  non-sidebar element */\n  margin: calc(var(--gutter) / 2 * -1);\n}\n\n.not-stretched-wrapper {\n  align-items: flex-start;\n}\n\n.stretched-wrapper {\n  align-items: stretch;\n}\n\n.with-sidebar-on-the-left > * > *,\n.with-sidebar-on-the-right > * > * {\n  flex-basis: 20rem;\n  /* Allow growing (needed for the vertical configuration) */\n  flex-grow: 1;\n  margin: calc(var(--gutter) / 2);\n}\n\n/* Selector for the non-sidebar element */\n.with-sidebar-on-the-left > * > :last-child,\n.with-sidebar-on-the-right > * > :first-child {\n  /* Grow from nothing */\n  flex-basis: 0;\n  /* Ensure all the available space is taken */\n  flex-grow: 999;\n  /* The value at which the layout changes between horizontal and vertical */\n  min-width: calc(60% - var(--gutter));\n}\n","/* \n  Inject vertical margins between individual elements via their common parent.\n  A stack should only care about vertical positioning. Colors are used just for\n  debugging purposes. By scoping a --color variable in the respective selector,\n  we can highlight different stack (e.g. small, large) with a different color.\n  https://every-layout.dev/layouts/stack/\n*/\n.stack {\n  --h: 240; /* Hue */\n  --s: 75%; /* Saturation */\n  --l: 50%; /* Lightness */\n  --color: hsl(var(--h), var(--s), var(--l));\n  --space: var(--typography-line-height);\n}\n\n/* \n  Reset the vertical margin for all stack-like elements (by matching class\n  values that BEGIN with 'stack').\n*/\n[class^='stack'] > * {\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\n.stack > * + * {\n  /* background: var(--color); */\n  margin-top: var(--space);\n}\n\n.stack-large > * + * {\n  --color: hsl(var(--h), calc(var(--s) + 25%), var(--l));\n  /* background: var(--color); */\n  margin-top: calc(var(--space) * 2);\n}\n\n.stack-small > * + * {\n  --color: hsl(var(--h), calc(var(--s) - 25%), var(--l));\n  /* background: var(--color); */\n  margin-top: calc(var(--space) * 0.5);\n}\n","/* \n  CSS Utility classes\n\n  Utility classes can be used in many different HTML elements to override very\n  specific properties of their style. Utility classese are for final adjustments\n  and should not be overridden by anything that comes before them. To stress\n  this fact we use the !important keyword (which should not be used in any other\n  CSS file).\n  Utility classes have the highest specificity and explicitness, and the lowest\n  reach.\n  See Harry Roberts' inverted triangle:\n  https://www.creativebloq.com/web-design/manage-large-css-projects-itcss-101517528\n*/\n\n/* stylelint-disable declaration-no-important */\n\n.font-size\\:base {\n  font-size: var(--font-size-base) !important;\n}\n\n.font-size\\:biggish {\n  font-size: var(--font-size-biggish) !important;\n}\n\n.font-size\\:big {\n  font-size: var(--font-size-big) !important;\n}\n\n/* stylelint-enable declaration-no-important */\n"]}